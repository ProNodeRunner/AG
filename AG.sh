#!/bin/bash
# AG Node Manager (Titan-Style)
# GitHub: https://github.com/your-repo

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE="/etc/ag_nodes.conf"
LOGO_URL="https://raw.githubusercontent.com/your-repo/main/logo.txt"
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'
NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}')

declare -A USED_IDS=()

show_menu() {
    clear
    echo -ne "${ORANGE}"
    curl -sSf "$LOGO_URL" 2>/dev/null || echo "=== AG INDUSTRIAL NODES ==="
    echo -e "${NC}\n1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—ã\n2) –°—Ç–∞—Ç—É—Å –Ω–æ–¥\n3) –õ–æ–≥–∏\n4) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n5) –û—á–∏—Å—Ç–∫–∞\n6) –í—ã—Ö–æ–¥\n"
}

validate_commands() {
    [[ "$1" =~ "curl -L https://github.com.*launcher" ]] && 
    [[ "$2" =~ "chmod +x" ]] && 
    [[ "$3" =~ "./launcher --user_did=did:embarky:.*--device_id=.*--device_name=" ]]
}

deploy_node() {
    local idx=$1
    echo -e "${ORANGE}=== –ù–û–î–ê $idx ===${NC}"
    
    # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥
    read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 1 (curl): " cmd1
    read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 2 (chmod): " cmd2
    read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 3 (./launcher): " cmd3
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if ! validate_commands "$cmd1" "$cmd2" "$cmd3"; then
        echo -e "${RED}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥!${NC}"
        return 1
    fi
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    local device_id=$(grep -oP "device_id=\K[^ ]+" <<< "$cmd3")
    local node_name=$(grep -oP "device_name=\K[^ ]+" <<< "$cmd3")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if [[ -n "${USED_IDS[$device_id]}" ]]; then
        echo -e "${RED}–û—à–∏–±–∫–∞: Device ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!${NC}"
        return 1
    fi

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    local mac=$(printf "02:%02X:%02X:%02X:%02X:%02X" $RANDOM $RANDOM $RANDOM $RANDOM $RANDOM)
    local port=$((30000 + RANDOM % 10000))
    local ip="10.$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%100+150))"

    # –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã
    {
        echo -e "${GREEN}[*] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã $node_name...${NC}"
        mkdir -p "/ag/$node_name" && cd "/ag/$node_name"
        eval "$cmd1" || exit 1
        eval "$cmd2" || exit 1
        
        docker run -d \
            --name "ag_$node_name" \
            --restart always \
            --mac-address "$mac" \
            --cpus 0.5 \
            --memory 1G \
            -p $port:$port \
            -v "$PWD:/data" \
            alpine/node:18 \
            sh -c "$cmd3 --http_port=$port" || exit 1

        USED_IDS["$device_id"]=1
        echo "$node_name|$device_id|$mac|$port|$ip" >> "$CONFIG_FILE"
    } 2>&1 | tee "/ag/$node_name/install.log"

    echo -e "${GREEN}[‚úì] –ù–æ–¥–∞ $node_name –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    sleep 1
}

setup_nodes() {
    while true; do
        read -p "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: " count
        [[ "$count" =~ ^[1-9][0-9]*$ ]] && break
        echo -e "${RED}–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0!${NC}"
    done

    for ((i=1; i<=count; i++)); do
        deploy_node $i
    done
}

node_status() {
    clear
    echo -e "${ORANGE}=== –°–¢–ê–¢–£–° –ù–û–î ===${NC}"
    printf "%-20s | %-15s | %-17s | %s\n" "–ò–º—è" "–ü–æ—Ä—Ç" "MAC" "–°—Ç–∞—Ç—É—Å"
    
    while IFS='|' read -r name _ mac port _; do
        if docker ps | grep -q "ag_$name"; then
            status="${GREEN}üü¢ ALIVE${NC}"
        else
            status="${RED}üî¥ DEAD${NC}"
        fi
        printf "%-20s | %-15s | %-17s | %b\n" "$name" "$port" "$mac" "$status"
    done < "$CONFIG_FILE"
    
    read -p $'\n–ù–∞–∂–º–∏—Ç–µ Enter...'
}

show_logs() {
    read -p "–ò–º—è –Ω–æ–¥—ã: " name
    echo -e "${ORANGE}=== –õ–û–ì–ò $name ===${NC}"
    docker logs --tail 50 "ag_$name" 2>&1 | ccze -A
    read -p $'\n–ù–∞–∂–º–∏—Ç–µ Enter...'
}

restart_nodes() {
    echo -e "${ORANGE}[*] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥...${NC}"
    while IFS='|' read -r name _ _ _ _; do
        docker restart "ag_$name" >/dev/null
    done < "$CONFIG_FILE"
    echo -e "${GREEN}[‚úì] –ù–æ–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    sleep 1
}

nuke_system() {
    echo -e "${RED}[!] –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• [!]${NC}"
    docker ps -aq --filter "name=ag_" | xargs -r docker rm -f
    rm -rf /ag/*
    > "$CONFIG_FILE"
    echo -e "${GREEN}[‚úì] –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞!${NC}"
    sleep 1
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
[ -f "$CONFIG_FILE" ] && while IFS='|' read -r _ id _ _ _; do
    USED_IDS["$id"]=1
done < "$CONFIG_FILE"

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
while true; do
    show_menu
    read -p "${ORANGE}–í—ã–±–æ—Ä:${NC} " choice
    case $choice in
        1) setup_nodes ;;
        2) node_status ;;
        3) show_logs ;;
        4) restart_nodes ;;
        5) nuke_system ;;
        6) exit 0 ;;
        *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"; sleep 1 ;;
    esac
done
