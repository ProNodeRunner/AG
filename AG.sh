#!/bin/bash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE="/etc/ag_nodes.conf"
LOGO_URL="https://raw.githubusercontent.com/AG-Abuse/Assets/main/logo"
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'
BASE_IP="10.$(shuf -i 0-255 -n1).$(shuf -i 0-255 -n1).0"
NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}')
declare -A USED_IDS=()
declare -A USED_PORTS=()

show_menu() {
    clear
    echo -ne "${ORANGE}"
    curl -sSf "$LOGO_URL" 2>/dev/null || echo "=== AG INDUSTRIAL NODES v3 ==="
    echo -e "\n1) –°–æ–∑–¥–∞—Ç—å –Ω–æ–¥—ã\n2) –°—Ç–∞—Ç—É—Å\n3) –õ–æ–≥–∏\n4) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n5) –£–¥–∞–ª–∏—Ç—å –≤—Å—ë\n6) –í—ã—Ö–æ–¥"
    echo -ne "${NC}"
}

generate_mac() {
    printf "02:%02x:%02x:%02x:%02x:%02x" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))
}

validate_commands() {
    [[ "$1" =~ "curl -L https://github.com.*launcher" ]] &&
    [[ "$2" =~ "chmod +x" ]] &&
    [[ "$3" =~ "./launcher --user_did=did:embarky:.*--device_id=.*--device_name=" ]]
}

deploy_node() {
    local node_num=$1
    local node_name=""
    local node_ip="${BASE_IP%.*}.$((${BASE_IP##*.} + node_num))"
    
    while true; do
        echo -e "\n${ORANGE}=== –ù–û–î–ê $node_num ==="
        read -p "CMD1 (curl): " cmd1
        read -p "CMD2 (chmod): " cmd2
        read -p "CMD3 (launch): " cmd3
        
        if validate_commands "$cmd1" "$cmd2" "$cmd3"; then
            node_name=$(echo "$cmd3" | grep -oP -- "--device_name=\K[^-]+")
            [[ -z "${USED_IDS[$node_name]}" ]] && break
            echo -e "${RED}–ò–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!${NC}"
        else
            echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥! –ü—Ä–∏–º–µ—Ä:${NC}"
            echo "CMD1: curl -L .../launcher -o launcher"
            echo "CMD3: ./launcher --user_did=... --device_id=... --device_name=..."
        fi
    done

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    local mac=$(generate_mac)
    local port=$((30000 + RANDOM%10000))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏
    sudo ip link add dev ag-$node_num type dummy 2>/dev/null
    sudo ip addr add $node_ip/24 dev $NETWORK_INTERFACE
    sudo iptables -t nat -A PREROUTING -i $NETWORK_INTERFACE -p tcp --dport $port -j DNAT --to-destination $node_ip:$port

    # –ó–∞–ø—É—Å–∫ –≤ Docker
    {
        mkdir -p /ag/$node_name && cd /ag/$node_name
        eval "$cmd1 && $cmd2"
        
        docker run -d \
            --name "ag_$node_name" \
            --restart unless-stopped \
            --mac-address $mac \
            --cpus 0.5 \
            --memory 1G \
            -p $port:$port \
            -v /ag/$node_name:/data \
            alpine/node:18 \
            sh -c "$cmd3 --http_port=$port"
            
        USED_IDS["$node_name"]="$mac|$port|$node_ip"
        echo "$node_name|$mac|$port|$node_ip|$(date +%s)" >> $CONFIG_FILE
    } 2>&1 | tee /ag/$node_name/install.log

    echo -e "${GREEN}–ù–æ–¥–∞ $node_name –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    sleep 1
}

setup_nodes() {
    read -p "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: " count
    [[ ! "$count" =~ ^[1-9][0-9]*$ ]] && echo -e "${RED}–û—à–∏–±–∫–∞!${NC}" && return
    
    for ((i=1; i<=count; i++)); do
        deploy_node $i
    done
}

check_status() {
    clear
    printf "${ORANGE}%-20s | %-17s | %-15s | %-15s | %s${NC}\n" "–ò–º—è" "MAC" "–ü–æ—Ä—Ç" "IP" "–°—Ç–∞—Ç—É—Å"
    
    while IFS='|' read -r name mac port ip timestamp; do
        if docker ps | grep -q "ag_$name"; then
            status="${GREEN}üü¢ ALIVE${NC}"
        else
            status="${RED}üî¥ DEAD${NC}"
        fi
        
        printf "%-20s | %-17s | %-15s | %-15s | %b\n" "$name" "$mac" "$port" "$ip" "$status"
    done < $CONFIG_FILE
    
    echo -e "\n${ORANGE}–†–ï–°–£–†–°–´:${NC}"
    docker stats --no-stream --format "{{.Name}}: {{.CPUPerc}} CPU / {{.MemUsage}}" | grep "ag_"
    
    read -p $'\n–ù–∞–∂–º–∏—Ç–µ Enter...'
}

show_logs() {
    read -p "–ò–º—è –Ω–æ–¥—ã: " name
    echo -e "${ORANGE}–õ–æ–≥–∏ $name:${NC}"
    docker logs --tail 50 "ag_$name" 2>&1 | grep -iE 'error|warn|fail' | ccze -A
    read -p $'\n–ù–∞–∂–º–∏—Ç–µ Enter...'
}

restart_nodes() {
    echo -e "${ORANGE}[*] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥...${NC}"
    while IFS='|' read -r name _ _ _ _; do
        docker restart "ag_$name" >/dev/null
    done < $CONFIG_FILE
    echo -e "${GREEN}[‚úì] –ù–æ–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    sleep 1
}

nuke_system() {
    echo -e "${RED}\n[!] –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï [!]${NC}"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ Docker-—Ä–µ—Å—É—Ä—Å–æ–≤
    docker ps -aq --filter "name=ag_" | xargs -r docker rm -f
    docker network prune -f
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–∏
    for i in {1..50}; do
        sudo ip link del dev ag-$i 2>/dev/null
        sudo ip addr del "${BASE_IP%.*}.$(( ${BASE_IP##*.} + i ))/24" dev $NETWORK_INTERFACE 2>/dev/null
    done
    sudo iptables -t nat -F
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    rm -rf /ag/*
    > $CONFIG_FILE
    
    echo -e "${GREEN}[‚úì] –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞!${NC}"
    sleep 1
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while true; do
    show_menu
    read -p "–í—ã–±–æ—Ä: " choice
    case $choice in
        1) setup_nodes ;;
        2) check_status ;;
        3) show_logs ;;
        4) restart_nodes ;;
        5) nuke_system ;;
        6) exit 0 ;;
        *) echo -e "${RED}–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞!${NC}"; sleep 1 ;;
    esac
done
